function pspm_test_275(varargin)
    %% pspm_test_275 is a temporary file for fixing issue 275
    import matlab.unittest.TestSuite;

    quit_after_tests = false;
    if nargin > 0
        quit_after_tests = varargin{1};
        assert(islogical(quit_after_tests));
    end

    % build suits
    % -------------------------------------------------------------------------
    suite = TestSuite.fromClass(?pspm_find_valid_fixations_test);


    import_suite = [...
        TestSuite.fromClass(?pspm_get_acq_test), ...
        TestSuite.fromClass(?pspm_get_acqmat_test), ...
        TestSuite.fromClass(?pspm_get_acq_bioread_test), ...
        TestSuite.fromClass(?pspm_get_biograph_test), ...
        TestSuite.fromClass(?pspm_get_biosemi_test), ...
        TestSuite.fromClass(?pspm_get_biotrace_test), ...
        TestSuite.fromClass(?pspm_get_brainvis_test), ...
        TestSuite.fromClass(?pspm_get_eyelink_test), ...
        TestSuite.fromClass(?pspm_get_labchartmat_ext_test), ...
        TestSuite.fromClass(?pspm_get_labchartmat_in_test), ...
        TestSuite.fromClass(?pspm_get_mat_test), ...
        TestSuite.fromClass(?pspm_get_obs_test), ...
        TestSuite.fromClass(?pspm_get_physlog_test), ...
        TestSuite.fromClass(?pspm_get_spike_test), ...
        TestSuite.fromClass(?pspm_get_txt_test), ...
        TestSuite.fromClass(?pspm_get_vario_test), ...
        TestSuite.fromClass(?pspm_get_edf_test), ...
        TestSuite.fromClass(?pspm_get_wdq_n_test), ...
        TestSuite.fromClass(?pspm_get_viewpoint_test), ...
        TestSuite.fromClass(?pspm_get_smi_test), ...
        TestSuite.fromClass(?import_eyelink_test), ...
        TestSuite.fromClass(?import_viewpoint_test), ...
        TestSuite.fromClass(?import_smi_test), ...
    ];

    chantype_suite = TestSuite.fromClass(?pspm_get_pupil_test);

    full_suite = [suite, import_suite, chantype_suite];

    % run tests
    % -------------------------------------------------------------------------
    % [pth, fn, ext] = fileparts(which('pspm_test.m'));
    [pth, ~, ~] = fileparts(which('pspm_test.m'));
    addpath(pth);
    pspm_init;
    stats = run(full_suite);
    n_failed = sum([stats.Failed]);
    success = n_failed == 0;

    if success
        disp('pspm_test: All tests have passed!');
    else
        disp('pspm_test: Some tests have failed!');
    end

    disp('===TEST_STATISTICS_BEGIN===');
    display(format_test_results(stats)); % seems not able to be replaced with fprintf
    disp('===TEST_STATISTICS_END===');
    if quit_after_tests
        exit_code = 1 - success;
        quit(exit_code);
    end

end
